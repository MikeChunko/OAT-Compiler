/* 
  Quicksort implementation by Adam Chen and Kurt Louie
*/
global length = 9;
global arr = new int[] {2,8,4,3,9,5,7,1,6};

void quicksort (int lo, int hi) {
    if (lo < hi)
    {
        var p = partition(lo, hi);
        quicksort(lo, p);
        quicksort(p + 1, hi);
    }
    return;
}

void swap(int i, int j){
    var temp = arr[i];
    arr[i] = arr[j];
    arr[j] = temp;
    return;
}

int partition(int lo, int hi) {
    var pivot = arr[(hi + lo) >> 1];
    var i = lo - 1;
    var j = hi + 1;
    while(true){
        i = i + 1;
        while (arr[i] < pivot)
        {
            i = i + 1;
        }
        
        j = j - 1;
        while (arr[j] > pivot)
        {
            j = j - 1;
        }
        if (i >= j) {
            return j;
        }
        swap(i,j);
    }
    return 0;
}

int exponent(int exp){
    var current = 1;
    for(var i=0; i < exp; i = i + 1;){
        current = current * 10;
    }
    return current;
}

int get_answer(){
    var answer = 0;
    for(var i =0; i < length; i = i + 1;){
        answer = answer + arr[i] * exponent(length - i - 1);
    }
    return answer;
}

int program (int argc, string[] argv){
    quicksort(0, 8);
    return get_answer();
}

