/*I pledge my honor that I have abided by the Stevens Honor System*/

/*This is a basic brainfuck interpreter with 10 registers. Unfortunately, there is no way to get input, so the "," command doesn't work. < also confuses the testing harness so "l" and "r" are used instead of "<" and ">" respecively. Made by Leo Ouyang*/

global registers = new int[]{0,0,0,0,0,0,0,0,0,0};

int program(int argc, string[] argv)
{
    if (argc != 2)
    {
        print_string("Usage: ./brainfuck <brainfuck code>\n"); /*if incorrect arguments are given, print error message to sterr*/
    }
    else
    {
        var code = array_of_string(argv[1]);
        var current = 0; /*the current register*/
        var loop = false; /*whether or not we've found a left bracket*/
        var count = 0; /* the current index*/
        while (count < length_of_string(argv[1]))
        {
            if (code[count] == 108) /*<*/
            {
                current = current - 1;
            }
            else if (code[count] == 114) /*>*/
            {
                current = current + 1;
            }
            else if (code[count] == 43) /*+*/
            {
                registers[current] = registers[current] + 1;
            }
            else if (code[count] == 45) /*-*/
            {
                registers[current] = registers[current] - 1;
            }
            else if (code[count] == 44) /*,*/
            {
                print_string("To use the input feature, please download brainfuck premium. (Currently there is now way to get input!)");
            }
            else if (code[count] == 46) /*.*/
            {
                print_string(string_of_int(registers[current]));
            }
            else if (code[count] == 91 & registers[current] == 0) /*[*/
            {
                var stackSize = 0;
                var looping = true;
                while (looping == true)
                {
                    count = count + 1;
                    if (code[count] == 91) /* we have to simulate a stack to find the correct "]" */
                    {
                        stackSize = stackSize + 1;
                    }
                    else if (code[count] == 93)
                    {
                        if (stackSize == 0)
                        {
                            looping = false;
                        }
                        else 
                        {
                            stackSize = stackSize - 1;
                        }
                    }
                    if (count >= length_of_string(argv[1]))
                    {
                        looping = false;
                        print_string("Syntax error: [ has no corresponding ].");
                    }
                }
            }
            else if (code[count] == 93 & registers[current] != 0) /*]*/
            {
                var stackSize = 0;
                var looping = true;
                while (looping == true)
                {
                    count = count - 1;
                    if (code[count] == 93) /* we have to simulate a stack to find the correct "]" */
                    {
                        stackSize = stackSize + 1;
                    }
                    else if (code[count] == 91)
                    {
                        if (stackSize == 0)
                        {
                            looping = false;
                        }
                        else 
                        {
                            stackSize = stackSize - 1;
                        }
                    }
                    if (count >= length_of_string(argv[1]))
                    {
                        looping = false;
                        print_string("Syntax error: ] has no corresponding [.");
                    }
                }
            }
            count = count + 1;
        }
        print_int(registers[current]);
    }
    return 0;
}
