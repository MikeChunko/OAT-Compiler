/**
 *
 * Author: Joshua Zeitlinger
 *
 */

void pretty_print_array(int[] arr, int len){
  print_string("[");
  for(var x = 0; x < len - 1; x = x + 1;){
    print_int(arr[x]);
    print_string(", ");
  }
  if(!(len == 0)) {
    print_int(arr[len - 1]);
  }
  print_string("]");
  return;
}

int longest_increasing_subsequence(int[] arr, int len){
  var dp = new int[len];
  var prev_index = new int[len];

  for(var x = 0; x < len; x = x + 1;) {
    var prev_longest = 0;
    for(var y = 0; y < x; y = y + 1; ){
      if(arr[y] < arr[x] & dp[y] > prev_longest){
        prev_longest = dp[y];
        prev_index[x] = y;
      }
    }
    dp[x] = prev_longest + 1;
  }

  var result = 0;
  var endIndex = 0;
  for(var x = 0; x < len; x = x + 1;){
    if(dp[x] > result){
      result = dp[x];
      endIndex = x;
    }
  }

  var sequence = new int[result]; 
  for(var seqIndex = result - 1; seqIndex >= 0; seqIndex = seqIndex - 1;) {
    sequence[seqIndex] = arr[endIndex];
    endIndex = prev_index[endIndex];
  }

  print_string("For input ");
  pretty_print_array(arr, len);
  print_string(" the longest increasing subsequence was: ");
  pretty_print_array(sequence, result);
  print_string(" with length ");
  print_int(result);

  return result;
}

int int_of_string(string s)
{
  var result = 0;
  var char_array = array_of_string(s);
  var negative = false;
  var i = 0;

  if(char_array[i] == 45)
  {
    negative = true;
    i = 1;
  }

  while(char_array[i] != 0)
  {
    result = result * 10;
    result = result + (char_array[i] - 48);
    i = i + 1;
  }

  if(!negative)
  {
    return result;
  } else {
    return ~result + 1;
  }
}

int program(int argc, string[] argv)
{
  if(argc < 2)
  {
    print_string(string_cat(string_cat("Usage: ", "./executable" /* (disabled for test suite) argv[0] */), " <num 0> <num 1> ..."));
    return 1;
  }

  var arr = new int[argc - 1];
  for(var x = 0; x < argc - 1; x = x + 1;)
  {
    arr[x] = int_of_string(argv[x + 1]);
  }

  var lis = longest_increasing_subsequence(arr, argc - 1);

  return 0;
}