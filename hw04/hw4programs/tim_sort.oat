global run = 32;

int program(int argc, string[] argv) {

  var arr = new int[]{ 5, 21, 7, 23, 19 };

  timsort(arr, 5);

  for(var i=0; i<5; i=i+1;) {
    print_int(arr[i]);
  }

  return 0;
}

void insertion_sort(int[] arr, int left, int right) { 
  for (var i = left + 1; i <= right; i = i+1;) { 
    var temp = arr[i]; 
    var j = i - 1; 
    while ((arr[j] > temp) & (j >= left)) { 
      arr[j+1] = arr[j]; 
      j = j - 1; 
    } 
    arr[j+1] = temp; 
  }

  return;
} 

void merge(int[] arr, int l, int m, int r) { 

  var len1 = m - l + 1;
  var len2 = r - m; 

  var left  = new int[len1];
  var right = new int[len2];

  for (var i = 0; i < len1; i = i+1;)  {
    left[i] = arr[l + i]; 
  }

  for (var i = 0; i < len2; i = i+1;) {
    right[i] = arr[m + 1 + i]; 
  }

  var i = 0; 
  var j = 0; 
  var k = l; 

  while ((i < len1) & (j < len2)) { 
    if (left[i] <= right[j]) { 
      arr[k] = left[i]; 
      i = i+1; 
    } else { 
      arr[k] = right[j]; 
      j = j+1; 
    } 
    k = k+1; 
  } 

  while (i < len1) { 
    arr[k] = left[i]; 
    k = k+1; 
    i = i+1;
  } 

  while (j < len2) { 
    arr[k] = right[j]; 
    k = k+1;
    j = j+1; 
  } 

  return;
}

int min(int x, int y) {
  if (x <= y) {
    return x;
  } else {
    return y;
  }
}
  

void timsort(int[] arr, int n) { 

  for (var i = 0; i < n; i = run + i;) {
    insertion_sort(arr, i, min((i + 31), (n - 1))); 
  }
 
  for (var size = run; size < n; size = 2 * size;) { 
    for (var left = 0; left < n; left = left + (2 * size);) { 
      var mid = left + size - 1; 
      var right = min((left + 2 * size - 1), (n-1)); 
      merge(arr, left, mid, right); 
    } 
  } 

  return;
}



