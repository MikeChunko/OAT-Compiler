struct Tetration {
  int[] bases;
  int[] exps;
  int[] results;
  int[] expected;
  int lngth;
  int counter;
  int check
}

Tetration f() {
  return new Tetration {bases = new int[] {2, 1, 2, 2, 3, 4, 5, 6};
                        exps = new int[] {2, 1, 3, 4, 2, 2, 2, 2};
                        results = new int[8] {x -> 0};
                        expected = new int[] {4, 1, 16, 65536, 27, 256, 3125, 46656};
                        lngth = 8;
                        counter = 0;
                        check = 0};
}

int power (int n, int exp, int dummy1, int dummy2, int dummy3, int dummy4, int dummy5, int dummy6) {
    if (exp == 0) {
        return 1;
    }
    var dummyn = dummy2 * dummy3 + dummy4;
    dummyn = dummyn + 1;

    return n * (power (n, exp - 1, dummy1+1, dummy2+2, dummy3+3, dummy4+dummy3, dummy4+dummy2, dummyn));
}

int tetrate (int n, int exp) {
    if (exp == 0) {
        return 1;
    }

    return power (n, tetrate (n, exp - 1), 1, 2, 3, 4, 5, 6);
}

int[] map (int[] fst, int[] snd, int len) {
    for (var i = 0; i < len; i = i + 1;) {
        fst[i] = tetrate (fst[i], snd[i]);
    }
    return fst;
}

int program (int argc, string[] argv) {
    var fst = power;
    var snd = tetrate;
    var mystery = f;
    var mystery1 = mystery;
    var mystery2 = tetrate;
    var mystery3 = mystery1;
    var check = 0;
    var tetration_info = mystery3();
    if (fst (2,2,1, 2, 3, 4,5,6) == 4 & fst (3,1,1, 2, 3, 4,5,6) == 3 & fst (99, 0,1, 2, 3, 4,5,6) == 1) {
        tetration_info.check = 1;
    }

    if (tetration_info.check != 1) {return 0;}
    else {tetration_info.check = 0;}
    
    if (mystery2 (2,2) == 4 & snd (1,1) == 1 & snd (2,3) == 16
        & mystery2 (2,4) == 65536 & snd (3,2) == 27
        & mystery2 (4,2) == 256 & snd (5,2) == 3125
        & mystery2 (6,2) == 46656) {
        tetration_info.check = 1;
    }

    if (tetration_info.check != 1) {return 0;}

    tetration_info.results = map(tetration_info.bases, tetration_info.exps, 8);

    for (; tetration_info.counter < tetration_info.lngth; tetration_info.counter = tetration_info.counter + 1;) {
        if (tetration_info.results[tetration_info.counter] != tetration_info.expected[tetration_info.counter]) {
            tetration_info.check = 0;
        }
    }

    if (tetration_info.check == 1) {
        print_string ("all clear");
        return 1 - tetrate (1 - tetration_info.check, 100);
    } else {
        print_string ("not good");
        return tetration_info.check;
    }
}
